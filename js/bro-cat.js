/**
 * –ö–æ—Ç –ë—Ä–æ - –†—ã–∂–∏–π AI-–ø–æ–º–æ—â–Ω–∏–∫ AI Studio
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º API –Ω–∞ localhost:3001
 */

class BroCatWidget {
  constructor() {
    this.isOpen = false;
    this.isTyping = false;
    this.sessionId = this.generateSessionId();
    this.apiBaseUrl = 'http://localhost:3001'; // –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ AI Studio API
    this.init();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–µ—Å—Å–∏–∏
  generateSessionId() {
    return 'bro_cat_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞
  init() {
    this.createWidget();
    this.bindEvents();
    // this.checkConnection(); // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –°–û–ï–î–ò–ù–ï–ù–ò–Ø
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∏–¥–∂–µ—Ç–∞
  createWidget() {
    // –ö–Ω–æ–ø–∫–∞ –≤—ã–∑–æ–≤–∞ –ö–æ—Ç–∞ –ë—Ä–æ
    const triggerButton = document.createElement('button');
    triggerButton.className = 'bro-cat-trigger';
    triggerButton.id = 'bro-cat-trigger';
    triggerButton.innerHTML = '';
    triggerButton.title = '–ö–æ—Ç –ë—Ä–æ - –†—ã–∂–∏–π –ø–æ–º–æ—â–Ω–∏–∫ AI Studio';
    document.body.appendChild(triggerButton);

    // –í–∏–¥–∂–µ—Ç —á–∞—Ç–∞
    const widget = document.createElement('div');
    widget.className = 'bro-cat-widget';
    widget.id = 'bro-cat-widget';
    widget.innerHTML = `
      <div class="bro-cat-header">
        <div class="bro-cat-info">
          <div class="bro-cat-avatar"></div>
          <div>
            <div class="bro-cat-title">–ö–æ—Ç –ë—Ä–æ üê±</div>
            <div class="bro-cat-subtitle">–†—ã–∂–∏–π AI-–ø–æ–º–æ—â–Ω–∏–∫</div>
          </div>
        </div>
        <div class="bro-cat-status" id="bro-cat-status"></div>
        <button class="bro-cat-close" id="bro-cat-close">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="bro-cat-messages" id="bro-cat-messages">
        <div class="bro-cat-message assistant">
          <div class="bro-cat-message-avatar"></div>
          <div class="bro-cat-message-content">
            –ú—è—É! üêæ *–ø–æ—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è* –Ø –ë—Ä–æ, —Ä—ã–∂–∏–π –∫–æ—Ç —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞! –•–æ—á–µ—à—å –ø–æ–±–æ–ª—Ç–∞—Ç—å? *–º—É—Ä—á–∏—Ç*
          </div>
        </div>
      </div>
      
      <div class="bro-cat-quick-actions">
        <button class="bro-cat-quick-btn" data-question="–ß—Ç–æ –ª—é–±–∏—à—å –µ—Å—Ç—å?">üç£ –í–∫—É—Å–Ω—è—à–∫–∏</button>
        <button class="bro-cat-quick-btn" data-question="–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ">üò∏ –û –∫–æ—Ç–µ</button>
        <button class="bro-cat-quick-btn" data-question="–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–≤–æ–π —Ö–æ–∑—è–∏–Ω?">ü§ñ –•–æ–∑—è–∏–Ω</button>
        <button class="bro-cat-quick-btn" data-question="–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ AI Studio">üöÄ AI Studio</button>
      </div>
      
      <div class="bro-cat-input-container">
        <input type="text" 
               class="bro-cat-input" 
               id="bro-cat-input" 
               placeholder="–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∫–æ—Ç—É... –º—è—É!"
               maxlength="500">
        <button class="bro-cat-send" id="bro-cat-send" disabled>
          <i class="fas fa-paper-plane"></i>
        </button>
      </div>
    `;
    
    document.body.appendChild(widget);
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    const trigger = document.getElementById('bro-cat-trigger');
    const widget = document.getElementById('bro-cat-widget');
    const closeBtn = document.getElementById('bro-cat-close');
    const input = document.getElementById('bro-cat-input');
    const sendBtn = document.getElementById('bro-cat-send');
    const quickBtns = document.querySelectorAll('.bro-cat-quick-btn');

    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–∂–µ—Ç–∞
    trigger.addEventListener('click', () => this.toggleWidget());
    closeBtn.addEventListener('click', () => this.closeWidget());

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    sendBtn.addEventListener('click', () => this.sendMessage());
    input.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        this.sendMessage();
      }
    });

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    input.addEventListener('input', () => {
      const hasText = input.value.trim().length > 0;
      sendBtn.disabled = !hasText;
      sendBtn.style.opacity = hasText ? '1' : '0.5';
    });

    // –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    quickBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const question = btn.dataset.question;
        this.sendMessage(question);
      });
    });
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
  toggleWidget() {
    if (this.isOpen) {
      this.closeWidget();
    } else {
      this.openWidget();
    }
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–∂–µ—Ç–∞
  openWidget() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –≤–∏–¥–∂–µ—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –∫–æ—Ç–∞
    this.closeOtherWidgets();
    
    const widget = document.getElementById('bro-cat-widget');
    const trigger = document.getElementById('bro-cat-trigger');
    
    widget.classList.add('active');
    trigger.classList.add('active');
    this.isOpen = true;
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    setTimeout(() => {
      document.getElementById('bro-cat-input').focus();
    }, 300);
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–∂–µ—Ç–∞
  closeWidget() {
    const widget = document.getElementById('bro-cat-widget');
    const trigger = document.getElementById('bro-cat-trigger');
    
    widget.classList.remove('active');
    trigger.classList.remove('active');
    this.isOpen = false;
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä—É–≥–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
  closeOtherWidgets() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç –•–∏–ø—ã—á–∞ –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
    const hipychWidget = document.getElementById('hipych-widget');
    const hipychTrigger = document.getElementById('hipych-trigger');
    
    if (hipychWidget && hipychWidget.classList.contains('active')) {
      hipychWidget.classList.remove('active');
      hipychTrigger.classList.remove('active');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (window.hipychWidget && window.hipychWidget.isOpen) {
        window.hipychWidget.isOpen = false;
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendMessage(customMessage = null) {
    const input = document.getElementById('bro-cat-input');
    const message = customMessage || input.value.trim();
    
    if (!message) return;

    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    if (!customMessage) {
      input.value = '';
      document.getElementById('bro-cat-send').disabled = true;
      document.getElementById('bro-cat-send').style.opacity = '0.5';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.addMessage(message, 'user');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
    this.showTyping();

    // –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê API - –£–ë–ò–†–ê–ï–ú FETCH –ó–ê–ü–†–û–°
    setTimeout(() => {
      this.hideTyping();
      const fakeResponse = `–ú—è—É! –¢—ã —Å–∫–∞–∑–∞–ª: "${message}". –Ø –ø–æ–∫–∞ –Ω–µ –æ—á–µ–Ω—å —É–º–Ω—ã–π –∫–æ—Ç, –Ω–æ —É—á—É—Å—å! üêæ`;
      this.addMessage(fakeResponse, 'assistant');
    }, 1000);

    /* // –£–î–ê–õ–Ø–ï–ú –ò–õ–ò –ö–û–ú–ú–ï–ù–¢–ò–†–£–ï–ú –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ë–õ–û–ö TRY-CATCH
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ö–æ—Ç—É –ë—Ä–æ —á–µ—Ä–µ–∑ AI Studio API
      const response = await fetch(`${this.apiBaseUrl}/api/bro-cat/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: message,
          user_id: this.sessionId,
          session_id: this.sessionId,
          source: 'ai_studio_website'
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
      this.hideTyping();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      this.addMessage(data.response || '–ú—è—É! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòø', 'assistant');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      this.hideTyping();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      this.addMessage('–ú—è—É! –ö–∞–∂–µ—Ç—Å—è, —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º... üôÄ –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!', 'assistant');
    }
    */
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
  addMessage(content, sender) {
    const messagesContainer = document.getElementById('bro-cat-messages');
    const messageElement = document.createElement('div');
    messageElement.className = `bro-cat-message ${sender}`;
    
    messageElement.innerHTML = `
      <div class="bro-cat-message-avatar"></div>
      <div class="bro-cat-message-content">${content}</div>
    `;
    
    messagesContainer.appendChild(messageElement);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è (opacity –∏ transform)
    messageElement.style.opacity = '0';
    messageElement.style.transform = 'translateY(20px)'; // –í–û–ó–í–†–ê–©–ê–ï–ú TRANSFORM
    
    setTimeout(() => {
      messageElement.style.transition = 'all 0.3s ease'; // –ê–ù–ò–ú–ò–†–£–ï–ú –í–°–Å
      messageElement.style.opacity = '1';
      messageElement.style.transform = 'translateY(0)'; // –í–û–ó–í–†–ê–©–ê–ï–ú TRANSFORM
      
      // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ü–û–°–õ–ï –∞–Ω–∏–º–∞—Ü–∏–∏, —Å –Ω—É–ª–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π setTimeout
      setTimeout(() => {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }, 0);
    }, 50);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
  showTyping() {
    if (this.isTyping) return;
    
    this.isTyping = true;
    const messagesContainer = document.getElementById('bro-cat-messages');
    
    const typingElement = document.createElement('div');
    typingElement.className = 'bro-cat-typing';
    typingElement.id = 'bro-cat-typing';
    typingElement.innerHTML = `
      <div class="bro-cat-message-avatar"></div>
      <div class="bro-cat-typing-content">
        <div class="bro-cat-typing-dots">
          <span class="bro-cat-typing-dot"></span>
          <span class="bro-cat-typing-dot"></span>
          <span class="bro-cat-typing-dot"></span>
        </div>
      </div>
    `;
    
    messagesContainer.appendChild(typingElement);
    typingElement.scrollIntoView({ behavior: 'smooth', block: 'end' });
  }

  // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
  hideTyping() {
    const typingElement = document.getElementById('bro-cat-typing');
    if (typingElement) {
      typingElement.remove();
    }
    this.isTyping = false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async checkConnection() {
    try {
      const response = await fetch(`${this.apiBaseUrl}/api/status`);
      const isOnline = response.ok;
      this.updateConnectionStatus(isOnline);
    } catch (error) {
      this.updateConnectionStatus(false);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  updateConnectionStatus(isOnline) {
    const statusElement = document.getElementById('bro-cat-status');
    if (statusElement) {
      statusElement.className = `bro-cat-status ${isOnline ? 'online' : 'offline'}`;
      statusElement.title = isOnline ? '–ö–æ—Ç –≤ —Å–µ—Ç–∏' : '–ö–æ—Ç —Å–ø–∏—Ç';
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  window.broCatWidget = new BroCatWidget();
}); 
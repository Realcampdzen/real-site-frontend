/**
 * –•–∏–ø—ã—á - –ì–µ–π–º–µ—Ä—Å–∫–∏–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç AI Studio
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º API –Ω–∞ localhost:3002
 */

class HipychWidget {
  constructor() {
    this.isOpen = false;
    this.isTyping = false;
    this.sessionId = this.generateSessionId();
    this.apiBaseUrl = 'http://localhost:3001'; // –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ AI Studio API
    this.init();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–µ—Å—Å–∏–∏
  generateSessionId() {
    return 'hipych_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞
  init() {
    this.createWidget();
    this.bindEvents();
    this.checkConnection();
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∏–¥–∂–µ—Ç–∞
  createWidget() {
    // –ö–Ω–æ–ø–∫–∞ –≤—ã–∑–æ–≤–∞ –•–∏–ø—ã—á–∞
    const triggerButton = document.createElement('button');
    triggerButton.className = 'hipych-trigger';
    triggerButton.id = 'hipych-trigger';
    triggerButton.innerHTML = '';
    triggerButton.title = '–•–∏–ø—ã—á - –î–µ–º–æ AI –ø–æ–º–æ—â–Ω–∏–∫ AI Studio';
    document.body.appendChild(triggerButton);

    // –í–∏–¥–∂–µ—Ç —á–∞—Ç–∞
    const widget = document.createElement('div');
    widget.className = 'hipych-widget';
    widget.id = 'hipych-widget';
    widget.innerHTML = `
      <div class="hipych-header">
        <div class="hipych-info">
          <div class="hipych-avatar"></div>
          <div>
            <div class="hipych-title">–•–∏–ø—ã—á AI</div>
            <div class="hipych-subtitle">–î–µ–º–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç AI Studio</div>
          </div>
        </div>
        <div class="hipych-status" id="hipych-status"></div>
        <button class="hipych-close" id="hipych-close">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="hipych-messages" id="hipych-messages">
        <div class="hipych-message assistant">
          <div class="hipych-message-avatar"></div>
          <div class="hipych-message-content">
            –ß—ë –∫–æ–≥–æ, –≥–Ω–æ–º! üéÆ –ü–æ–ø–∞–ª –Ω–∞ —Ç—É—Å–æ–≤–∫—É –•–∏–ø—ã—á–∞ –æ—Ç AI Studio! –ì–æ—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞—à–∏ –∫—Ä—É—Ç—ã–µ –±–æ—Ç—ã! üöÄ
          </div>
        </div>
      </div>
      
      <div class="hipych-quick-actions">
        <button class="hipych-quick-btn" data-question="–ß—Ç–æ —É–º–µ—é—Ç –≤–∞—à–∏ –±–æ—Ç—ã?">ü§ñ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</button>
        <button class="hipych-quick-btn" data-question="–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –±–æ—Ç?">üí∞ –¶–µ–Ω—ã</button>
        <button class="hipych-quick-btn" data-question="–ü–æ–∫–∞–∂–∏ –¥–µ–º–æ">üéÆ –î–µ–º–æ</button>
        <button class="hipych-quick-btn" data-question="–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å?">üìû –ó–∞–∫–∞–∑</button>
      </div>
      
      <div class="hipych-input-container">
        <input type="text" 
               class="hipych-input" 
               id="hipych-input" 
               placeholder="–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –•–∏–ø—ã—á—É..."
               maxlength="500">
        <button class="hipych-send" id="hipych-send" disabled>
          <i class="fas fa-paper-plane"></i>
        </button>
      </div>
    `;
    
    document.body.appendChild(widget);
  }

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    const trigger = document.getElementById('hipych-trigger');
    const widget = document.getElementById('hipych-widget');
    const closeBtn = document.getElementById('hipych-close');
    const input = document.getElementById('hipych-input');
    const sendBtn = document.getElementById('hipych-send');
    const quickBtns = document.querySelectorAll('.hipych-quick-btn');

    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–∂–µ—Ç–∞
    trigger.addEventListener('click', () => this.toggleWidget());
    closeBtn.addEventListener('click', () => this.closeWidget());

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    sendBtn.addEventListener('click', () => this.sendMessage());
    input.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        this.sendMessage();
      }
    });

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    input.addEventListener('input', () => {
      const hasText = input.value.trim().length > 0;
      sendBtn.disabled = !hasText;
      sendBtn.style.opacity = hasText ? '1' : '0.5';
    });

    // –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    quickBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const question = btn.dataset.question;
        this.sendMessage(question);
      });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –≤–∏–¥–∂–µ—Ç–∞
    document.addEventListener('click', (e) => {
      if (!widget.contains(e.target) && !trigger.contains(e.target) && this.isOpen) {
        // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å –∫—Ä–µ—Å—Ç–∏–∫
      }
    });
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
  toggleWidget() {
    if (this.isOpen) {
      this.closeWidget();
    } else {
      this.openWidget();
    }
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–∂–µ—Ç–∞
  openWidget() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –≤–∏–¥–∂–µ—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –•–∏–ø—ã—á–∞
    this.closeOtherWidgets();
    
    const widget = document.getElementById('hipych-widget');
    const trigger = document.getElementById('hipych-trigger');
    
    widget.classList.add('active');
    trigger.classList.add('active');
    this.isOpen = true;
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    setTimeout(() => {
      document.getElementById('hipych-input').focus();
    }, 300);
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–∂–µ—Ç–∞
  closeWidget() {
    const widget = document.getElementById('hipych-widget');
    const trigger = document.getElementById('hipych-trigger');
    
    widget.classList.remove('active');
    trigger.classList.remove('active');
    this.isOpen = false;
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä—É–≥–∏—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
  closeOtherWidgets() {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç –∫–æ—Ç–∞ –ë—Ä–æ –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
    const broCatWidget = document.getElementById('bro-cat-widget');
    const broCatTrigger = document.getElementById('bro-cat-trigger');
    
    if (broCatWidget && broCatWidget.classList.contains('active')) {
      broCatWidget.classList.remove('active');
      broCatTrigger.classList.remove('active');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (window.broCatWidget && window.broCatWidget.isOpen) {
        window.broCatWidget.isOpen = false;
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendMessage(customMessage = null) {
    const input = document.getElementById('hipych-input');
    const message = customMessage || input.value.trim();
    
    if (!message) return;

    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    if (!customMessage) {
      input.value = '';
      document.getElementById('hipych-send').disabled = true;
      document.getElementById('hipych-send').style.opacity = '0.5';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.addMessage(message, 'user');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
    this.showTyping();

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –•–∏–ø—ã—á—É —á–µ—Ä–µ–∑ AI Studio API
      const response = await fetch(`${this.apiBaseUrl}/api/hipych/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: message,
          user_id: this.sessionId,
          session_id: this.sessionId,
          source: 'ai_studio_website'
        })
      });

      const data = await response.json();
      
      // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
      this.hideTyping();

      if (data.response) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –•–∏–ø—ã—á–∞
        this.addMessage(data.response, 'assistant');
        this.updateConnectionStatus(true);
      } else {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      this.hideTyping();
      this.updateConnectionStatus(false);
      
      // Fallback –æ—Ç–≤–µ—Ç
      this.addMessage(
        '–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ –•–∏–ø—ã—á –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å @Stivanovv –Ω–∞–ø—Ä—è–º—É—é!',
        'assistant'
      );
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
  addMessage(content, sender) {
    const messagesContainer = document.getElementById('hipych-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `hipych-message ${sender}`;
    
    const avatarClass = sender === 'user' ? 'hipych-message-avatar' : 'hipych-message-avatar';
    const avatarContent = sender === 'user' ? 'üë§' : '';
    
    messageDiv.innerHTML = `
      <div class="${avatarClass}">${avatarContent}</div>
      <div class="hipych-message-content">${content}</div>
    `;
    
    messagesContainer.appendChild(messageDiv);
    
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
  showTyping() {
    if (this.isTyping) return;
    
    this.isTyping = true;
    const messagesContainer = document.getElementById('hipych-messages');
    
    const typingDiv = document.createElement('div');
    typingDiv.className = 'hipych-typing';
    typingDiv.id = 'hipych-typing-indicator';
    typingDiv.innerHTML = `
      –•–∏–ø—ã—á –ø–µ—á–∞—Ç–∞–µ—Ç
      <div class="hipych-typing-dots">
        <div class="hipych-typing-dot"></div>
        <div class="hipych-typing-dot"></div>
        <div class="hipych-typing-dot"></div>
      </div>
    `;
    
    messagesContainer.appendChild(typingDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
  hideTyping() {
    this.isTyping = false;
    const typingIndicator = document.getElementById('hipych-typing-indicator');
    if (typingIndicator) {
      typingIndicator.remove();
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –•–∏–ø—ã—á—É
  async checkConnection() {
    try {
      const response = await fetch(`${this.apiBaseUrl}/api/hipych/status`);
      this.updateConnectionStatus(response.ok);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
      this.updateConnectionStatus(false);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  updateConnectionStatus(isOnline) {
    const statusIndicator = document.getElementById('hipych-status');
    if (statusIndicator) {
      statusIndicator.className = isOnline ? 'hipych-status' : 'hipych-status offline';
      statusIndicator.title = isOnline ? '–•–∏–ø—ã—á –æ–Ω–ª–∞–π–Ω' : '–•–∏–ø—ã—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
  // –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –•–∏–ø—ã—á–∞ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
  console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –•–∏–ø—ã—á–∞...');
  window.hipychWidget = new HipychWidget();
  console.log('‚úÖ –•–∏–ø—ã—á —Å–æ–∑–¥–∞–Ω!');
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  setInterval(() => {
    window.hipychWidget.checkConnection();
  }, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
}); 